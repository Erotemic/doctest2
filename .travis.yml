env:
    global:
        # travis encrypt TWINE_PASSWORD=$TWINE_PASSWORD
        - secure: "keQ9wkOPpGhlK3WUt3Qr/qtLzKIiag0zbsrHS9MqnbNiwNepbOWYaG0PZZQs7UzxTFSWsawInsiy5FLhJRKMJRw9yZBWVaWQEh3DmkZVovQKL5Eaa2d4kad2VX81emfCjRZnxe1LmDchOxwRgdmu0EkrZFX4iiFWb8VC7gb9TVIreqb8GtyTtPpFxkdvRf1iAlxZh612i+MQACv5y7XkDMzX4FGQIcpIyUr8XmLLwmP9/WF/4K+UuBa0YajKhp4lymAIPQj/wMZs0tDl2jhNaoXoIMXbQjbIw02F2hvTQOfYbkKYMndPDlHvs4/ubkxHJRzRdC8iv5eYHBcFqhjpGSuzbSRhSbsGR5K9uOjhRyCIj3eup4KdSA9irH33EB+9gJX2C66XcA9ry0bVsnWFKEGyiEVqeMd7A0UrOwJVS0M8TSv3FV5OYhdk2A/IMohGB8qhOhWoYkTxl93lP3r8qxmvZSfxAWtzne3K0D6XV20f061FA2OZKiNfJ/2/hAoH2iQxnRp22Zu1D9bL1h1jPXErLdc+Tzz42jUyAnn2ZTv/6kRkLx7RnDYUojoDL8nXh9VBZRQ/ADaZN2G2GCRsAq3yPkNVmP76hmABdsp4VvnFKe8res6JiCEIplBps7rJAlAjkUq4afN3sPENWIKfW/ATXkyr4iksUxmL4M5bpO0="
        # travis encrypt TWINE_USERNAME=$TWINE_USERNAME
        - secure: "kUhV0lrE04WDn9xGlJ9fnaQjCAfIt/iPthQflfvsOx4S4EGb4rEVS74HVntaXmksHBjnKeXc9DAF1lFYuG5fQlQ0dszQ2QeIctpHiY+EbY3FIosTIlisjVDRtpCaLnNk/3bw1GOF4lLPLzFNtIzyfZMQkCxHqUu3mGBgZv7LJLr1BltC3O4oBQe/w3/xaaT1tWk8uLcW24rVNB9OJzektoMATorWvc6Ekuadmgw0rD6X8WpoOftgYVo1Y1WQFCWKHz8KTcyX5OF2oqdcztCAjXjZbZk48cI//CP810sxKot2evI8rITGKO1/QNy+x8hmNTq0/bvgvetahlsVPoR5lp1HT4sHBbZDh5JKAFAZHAjpUouxtgDIvYs6sFyQuWJCypUXoA89xdkyjtyEjWfBN/LyiPr81SOzy3ysW6VFchmF8JpM4WJz/+ppZ3kbthqb4iOMqX7wXmNVKDAqmz46dkG+wVAGKgF6U8IuQNL+biisFNwXVmvCknDaE7mXkat88eEV/4bDZi8t9T/rI3Qni3el0fFXy0ymDtPePrXGvyF8PZZODXGGMnQixrXcwm5ty/ZoCwqhtQqy/yhEGjnK+ISRCSnJ7OzrLNibVIN4EJE9Y8mp1EhtU7EtcrLc43VPoII5cZycjK6dYX56Zv/J8OlbGGpyM/fYeWQa9ZyWWds="
        # travis encrypt TRAVIS_SECRET=$TRAVIS_SECRET
        - secure: "nv9QrVtEG7AtFvR6r1+YK0T06YW0Oya4ONXtiHkmLxt2ncqDcUBvxYXSZBtQ6d+ABV1FO1Z8pf5qkEv1Q0YRZd9PL1y7hE//NgjrXAruDtuXf2j0jTDzeR6dTp9gHoXJTNOHrQHPt9/GfceVXRKvDxNU84vU5dBX1SVCKcGBsXrlmvQgTVuGAojmK8w/RHPhHEUbC0/aSFlkc0z/U5U05UyLaJ7cJN1+0mFa+wlXTyPkiJ9O1rbVz5/7NTKZJvobqjKP4i+j/7yjqXXTdBm2KDa41wGQCuvBUk1B8ewYvEpdyyF8LoNpGJYUniGrpPW46u1Jz4U1fZsCYwa2kWmJqmCLCVwtuvVj81E7fLvLK0nzqOgmK8yaFfOM+lv8vu7PSV0ofPWbRGAI95HP2lfCCiDW2fNW9zkELYTU9vgMJw+U6dX7Z++EfFeDJ5N6PY7lgtYjYO9w1FjiYS5fH2S0DgsJu4gWnXvv9E0xiFXRlot+Ja5o93/WJWSBT12GdXDKlXp8PorVaT69d3TUjW1ZqDv2QJ3H8+nl6JbnOg7xop1zfqqShnZcsc5Kl7Zj0PvyMgWYzydvk/f+hErhkFS9g7NGxdDnCNa8Bt5xF8/hRAW/8AGlSeNC7yRacIDzr3bd4rrXJNln4Z6cY4HsZ7FF4TW/rYfWqrBRT80cN9+78RM="
          
language: python
sudo: false
dist: bionic

cache:
  apt: true
  directories:
  - $HOME/.cache/pip
  - $HOME/download
  - $HOME/tmp_prefix
python:
  - "2.6"
  - "2.7"
  - "3.4"
  - "3.5"
  - "3.6"
  - "3.7"
before_install:
  - pip install pip -U
  - pip install -r requirements.txt -U
install:
  - travis_retry pip install -e .
script: 
  #- travis_wait ./run_tests.py
  #- travis_wait python run_tests.py
  - travis_wait pytest --cov=xdoctest
after_success: 
    - codecov 
    - gpg --version
    - #gpg2 --version
    - export GPG_EXECUTABLE=gpg
    - openssl version
    - | 
        __heredoc__='''
        # HOW TO SETUP A GPG KEY
        #
        # References:
        # .. [1] https://github.com/travis-ci/travis.rb
        # .. [2] https://docs.travis-ci.com/user/encrypting-files/

        # After you have setup your GPG key (plenty of resources on google about how to do this)
        IDENTIFIER="travis-ci-Erotemic"
        KEYID=$(gpg --list-keys --keyid-format LONG "$IDENTIFIER" | head -n 2 | tail -n 1 | awk '{print $1}' | tail -c 9)
        echo "KEYID = $KEYID"

        cd $HOME/code/xdoctest
        gpg --armor --export-secret-keys $KEYID > dev/travis_secret_gpg_key.pgp
        gpg --armor --export $KEYID > dev/travis_public_gpg_key.pgp
        gpg --export-ownertrust > dev/gpg_owner_trust

        # Login to travis (requires authentication)
        source $(secret_loader.sh)
        travis login --github-token $GITHUB_TOKEN
        source $(secret_unloader.sh)
        
        # The following commands will output lines that will need to be
        # manually added to this file. You could run with --add, but it messes
        # up the formatting of this file. 
        #travis encrypt-file dev/travis_secret_gpg_key.pgp dev/travis_secret_gpg_key.pgp.enc --force
        #travis encrypt-file dev/travis_public_gpg_key.pgp dev/travis_public_gpg_key.pgp.enc --force

        # Note:
        # You can set secret variables here in travis here:
        #  https://travis-ci.org/Erotemic/xdoctest/settings

        # Manually encrypt the secret files (TODO: need to vet this procedure)
        travis encrypt TRAVIS_SECRET=$TRAVIS_SECRET
        echo $TRAVIS_SECRET
        openssl aes-256-cbc -k $TRAVIS_SECRET -in dev/travis_public_gpg_key.pgp -e > dev/travis_public_gpg_key.pgp.enc
        openssl aes-256-cbc -k $TRAVIS_SECRET -in dev/travis_secret_gpg_key.pgp -e > dev/travis_secret_gpg_key.pgp.enc
        openssl aes-256-cbc -k $TRAVIS_SECRET -in dev/gpg_owner_trust -e > dev/gpg_owner_trust.enc


        TSP=$TRAVIS_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/travis_public_gpg_key.pgp > dev/travis_public_gpg_key.pgp.enc
        TSP=$TRAVIS_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/travis_secret_gpg_key.pgp > dev/travis_secret_gpg_key.pgp.enc
        TSP=$TRAVIS_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/gpg_owner_trust > dev/gpg_owner_trust.enc

        cat dev/travis_public_gpg_key.pgp.enc
        cat dev/travis_secret_gpg_key.pgp.enc
        cat dev/gpg_owner_trust.enc

        TSP=$TRAVIS_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/travis_public_gpg_key.pgp.enc
        TSP=$TRAVIS_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/travis_secret_gpg_key.pgp.enc
        TSP=$TRAVIS_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/gpg_owner_trust.enc

        # Export and encrpyt trust
        #GPG_OWNERTRUST=$(gpg --export-ownertrust | base64)
        #echo $GPG_OWNERTRUST
        #echo "$GPG_OWNERTRUST" | base64 --decode
        #travis encrypt GPG_OWNERTRUST="$GPG_OWNERTRUST"

        # Note: cant do this. travis gives a data too large error
        #GPG_SECRET_KEYS=$(gpg -a --export-secret-keys $IDENTIFIER | base64)
        #travis encrypt GPG_SECRET_KEYS="$GPG_SECRET_KEYS"
        '''  # <hack vim "regex" parser> '
    - |
        # Install a more recent version of GPG
        # https://gnupg.org/download/
        #export TMP_PREFIX=$HOME/tmp_prefix
        #export LD_LIBRARY_PATH=$TMP_PREFIX/lib:$LD_LIBRARY_PATH
        #export PATH=$TMP_PREFIX/bin:$PATH
        #export CPATH=$TMP_PREFIX/include:$CPATH
        #if [[ ! -f "$TMP_PREFIX/bin/gpg" ]]; then
        #    # try and have travis cache this
        #    mkdir -p $TMP_PREFIX
        #    echo $TMP_PREFIX
        #    OLD=$(pwd)
        #    cd $TMP_PREFIX
        #    wget https://gnupg.org/ftp/gcrypt/libgpg-error/libgpg-error-1.36.tar.bz2
        #    wget https://gnupg.org/ftp/gcrypt/libgcrypt/libgcrypt-1.8.5.tar.bz2
        #    wget https://gnupg.org/ftp/gcrypt/libksba/libksba-1.3.5.tar.bz2
        #    wget https://gnupg.org/ftp/gcrypt/libassuan/libassuan-2.5.3.tar.bz2
        #    wget https://gnupg.org/ftp/gcrypt/ntbtls/ntbtls-0.1.2.tar.bz2
        #    wget https://gnupg.org/ftp/gcrypt/npth/npth-1.6.tar.bz2
        #    wget https://gnupg.org/ftp/gcrypt/gnupg/gnupg-2.2.17.tar.bz2
        #    tar xjf libgpg-error-1.36.tar.bz2
        #    tar xjf libgcrypt-1.8.5.tar.bz2
        #    tar xjf libksba-1.3.5.tar.bz2
        #    tar xjf libassuan-2.5.3.tar.bz2
        #    tar xjf ntbtls-0.1.2.tar.bz2
        #    tar xjf npth-1.6.tar.bz2
        #    tar xjf gnupg-2.2.17.tar.bz2
        #    (cd libgpg-error-1.36 && ./configure --prefix=$TMP_PREFIX && make install)
        #    (cd libgcrypt-1.8.5 && ./configure --prefix=$TMP_PREFIX && make install)
        #    (cd libksba-1.3.5 && ./configure --prefix=$TMP_PREFIX && make install)
        #    (cd libassuan-2.5.3 && ./configure --prefix=$TMP_PREFIX && make install)
        #    (cd ntbtls-0.1.2 && ./configure --prefix=$TMP_PREFIX && make install)
        #    (cd npth-1.6 && ./configure --prefix=$TMP_PREFIX && make install)
        #    (cd gnupg-2.2.17 && ./configure --prefix=$TMP_PREFIX && make install)
        #    export GPG_EXECUTABLE=gpg
        #    cd $OLD
        #fi
    # Decrypt and import GPG Keys / trust
    - $GPG_EXECUTABLE --version
    - openssl version
    - $GPG_EXECUTABLE --list-keys
    - TSP=$TRAVIS_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/travis_public_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
    - TSP=$TRAVIS_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/travis_secret_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
    - TSP=$TRAVIS_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/gpg_owner_trust.enc | $GPG_EXECUTABLE --import-ownertrust
    - $GPG_EXECUTABLE --list-keys
    - |
        pip install twine
        if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
          pip install six pyopenssl ndg-httpsclient pyasn1 -U --user
          pip install requests[security] twine --user
        elfi
        if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
          pip install six twine
          pip install --upgrade pyOpenSSL
        fi
    # Package and publish to pypi (if on release)
    - |
        echo "TRAVIS_BRANCH = $TRAVIS_BRANCH"
        if [[ "$TRAVIS_BRANCH" == "release" ]]; then
            # use set +x to log all intermediate commands 
            set +x
            export CURRENT_BRANCH=$TRAVIS_BRANCH
            # TODO: reliable and secure gpg keys
            # Relies on a specific environmenmt being available 
            GPG_KEYID=D297D757 TWINE_PASSWORD=$TWINE_PASSWORD TWINE_USERNAME=$TWINE_USERNAME GPG_EXECUTABLE=$GPG_EXECUTABLE USE_GPG=True DEPLOY_BRANCH=release TAG_AND_UPLOAD=yes ./publish.sh
            set -x
        else
            GPG_KEYID=D297D757 TWINE_PASSWORD=$TWINE_PASSWORD TWINE_USERNAME=$TWINE_USERNAME GPG_EXECUTABLE=$GPG_EXECUTABLE USE_GPG=True DEPLOY_BRANCH=release TAG_AND_UPLOAD=no ./publish.sh
        fi
