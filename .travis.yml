env:
    global:
        # travis encrypt GITHUB_USERNAME=$GITHUB_USERNAME
        - secure: "iwE1/wyEIrgli3AVccmtEkNyU4NVe6UThs0iL7YQ6vFwsMCJjrBzK0tCqccBx2Toz07JWa8CORL48BgHNfsZeDvKZvWW8JUjC6tmwJnAzzHY0s+2S3xEkaqWpuXrwjKTcZxzGuZ5IvXXXja1IpDSo+mMuU8ETp4V3aWp7alfpxjbi+shI7UYxz7nRmnCo0vWyrzTH5SeHm68EEjoXcD3QaF4DwTFBtmEZ3PtD88Gvt8HKF2VpuQoNruAzyLeinXX1Zprt2h67ee/uveAuRYMWLYQGWxynOowxFk46whLeL//QvGuR4FE3C3jXp4nbnoHjUoVOCeODHZ7HegqWE6mybCz5slE8ZlPaS8dKfRNHRWVnIqYWXpeRBV6FqaBGw7qp+iV3VfRb5rdnYRzoTEmguRI3TFb4RPkUhIW/cfco/zfoFXJDgpdwizUEv5I6TRqphGCvdJTnwMilYXK1PJg0yzw76tsRWPYqmF/i9CrbiHT5+Wgi0I2rGukmHMZhifFwy3jmreBXNBjG5/KZFbYpDG6+aHMDwyAheG4UYOzYUhLRU02U5TlAH67HHgf5y6GQh1RCROJOgIjBvOfPprL2FqWhG+9FJILBte3GH1czHXiGiAUltkC1V/5IZGxDKNhDsotBHltjs7DAvBF5yQ2T2lgw3IGhzNTvn0Z4cWaHDo="
        # travis encrypt TWINE_PASSWORD=$TWINE_PASSWORD
        - secure: "ieDarSvpKjIr9Ek3aVyMvVX/tIgAa/LiCtU5tRsLm+UnPqu9fwmFsl++oz0jP6IdJHK/cuX9pasA4Le8Ljk2E9+ywyD9ijUXKf2EpeLg4xAdKA/1MpbB+MyC3GBkUW+TV7y874gTtbg2acgi7klHyhYdF6zdbFnJtJcg8N8tOMUgFShwtMkvSvsilbspFAo+C+6TDQX8fiaECiyZ9MW+W0GSTgYX9Kc5YAi1TxCrfZc8QUivSZaMTxOlae7rJxXKoF6xZSyP1s3hY1n2tz+44bFnb5VP70W5025hSGMSSA1FuvIp3cV25HQekflKn2tICkLviUs7cMzZosbwQrBuneRYzKy1y9G5i4pheA2sTw/6ThQ1pGCK2yjdZy1fvyQ0acGn2hvKrWwIP2p5f0plFcGpnFqf5d+CNLHIQwabtmgJQA8u9o0Ac/m4gJutyTkpHTnZhuudUIBq70Nm82wZLSKQepUvurwWq+b6kdvhPY5F+Xa1EUWsq07Ap5FnVURAAoTNpU7P1BnTRjrVllAGeJvyB91SaODJG/xxfdh15YpvlfK0M/kjansMLXUQwpXRsBQwUqEI8X/lQIkxAFvnUcIgtXIX1CV4C0sEpjUc9ZmPdsWFBKgnjzr0urgV28/6o9uEQ/4qDKAbg/kM0djcVLyQ2h6jdLiNhUM3dMJDBlY="
        # travis encrypt TRAVIS_SECRET=$TRAVIS_SECRET
        - secure: "nv9QrVtEG7AtFvR6r1+YK0T06YW0Oya4ONXtiHkmLxt2ncqDcUBvxYXSZBtQ6d+ABV1FO1Z8pf5qkEv1Q0YRZd9PL1y7hE//NgjrXAruDtuXf2j0jTDzeR6dTp9gHoXJTNOHrQHPt9/GfceVXRKvDxNU84vU5dBX1SVCKcGBsXrlmvQgTVuGAojmK8w/RHPhHEUbC0/aSFlkc0z/U5U05UyLaJ7cJN1+0mFa+wlXTyPkiJ9O1rbVz5/7NTKZJvobqjKP4i+j/7yjqXXTdBm2KDa41wGQCuvBUk1B8ewYvEpdyyF8LoNpGJYUniGrpPW46u1Jz4U1fZsCYwa2kWmJqmCLCVwtuvVj81E7fLvLK0nzqOgmK8yaFfOM+lv8vu7PSV0ofPWbRGAI95HP2lfCCiDW2fNW9zkELYTU9vgMJw+U6dX7Z++EfFeDJ5N6PY7lgtYjYO9w1FjiYS5fH2S0DgsJu4gWnXvv9E0xiFXRlot+Ja5o93/WJWSBT12GdXDKlXp8PorVaT69d3TUjW1ZqDv2QJ3H8+nl6JbnOg7xop1zfqqShnZcsc5Kl7Zj0PvyMgWYzydvk/f+hErhkFS9g7NGxdDnCNa8Bt5xF8/hRAW/8AGlSeNC7yRacIDzr3bd4rrXJNln4Z6cY4HsZ7FF4TW/rYfWqrBRT80cN9+78RM="
          
language: python
sudo: false

cache:
  apt: true
  directories:
  - $HOME/.cache/pip
  - $HOME/download
  - $HOME/tmp_prefix
python:
  - "2.7"
  - "3.4"
  - "3.5"
  - "3.6"
  - "3.7"
before_install:
  - pip install pip -U
  - pip install -r requirements.txt -U
install:
  - travis_retry pip install -e .
script: 
  #- travis_wait ./run_tests.py
  #- travis_wait python run_tests.py
  - travis_wait pytest --cov=xdoctest
after_success: 
    - codecov 
    - gpg --version
    - gpg2 --version
    - export GPG_EXECUTABLE=gpg2
    - openssl version
    - | 
        __heredoc__='''
        # HOW TO SETUP A GPG KEY
        #
        # References:
        # .. [1] https://github.com/travis-ci/travis.rb
        # .. [2] https://docs.travis-ci.com/user/encrypting-files/

        # After you have setup your GPG key (plenty of resources on google about how to do this)
        IDENTIFIER="travis-ci-Erotemic"
        KEYID=$(gpg --list-keys --keyid-format LONG "$IDENTIFIER" | head -n 2 | tail -n 1 | awk '{print $1}' | tail -c 9)
        echo "KEYID = $KEYID"

        cd $HOME/code/xdoctest
        gpg --armor --export-secret-keys $KEYID > dev/travis_secret_gpg_key.pgp
        gpg --armor --export $KEYID > dev/travis_public_gpg_key.pgp
        gpg --export-ownertrust > dev/gpg_owner_trust

        # Login to travis (requires authentication)
        source $(secret_loader.sh)
        travis login --github-token $GITHUB_TOKEN
        source $(secret_unloader.sh)
        
        # The following commands will output lines that will need to be
        # manually added to this file. You could run with --add, but it messes
        # up the formatting of this file. 
        #travis encrypt-file dev/travis_secret_gpg_key.pgp dev/travis_secret_gpg_key.pgp.enc --force
        #travis encrypt-file dev/travis_public_gpg_key.pgp dev/travis_public_gpg_key.pgp.enc --force

        # Note:
        # You can set secret variables here in travis here:
        #  https://travis-ci.org/Erotemic/xdoctest/settings

        # Manually encrypt the secret files (TODO: need to vet this procedure)
        travis encrypt TRAVIS_SECRET=$TRAVIS_SECRET
        echo $TRAVIS_SECRET
        openssl aes-256-cbc -k $TRAVIS_SECRET -in dev/travis_public_gpg_key.pgp -e > dev/travis_public_gpg_key.pgp.enc
        openssl aes-256-cbc -k $TRAVIS_SECRET -in dev/travis_secret_gpg_key.pgp -e > dev/travis_secret_gpg_key.pgp.enc
        openssl aes-256-cbc -k $TRAVIS_SECRET -in dev/gpg_owner_trust -e > dev/gpg_owner_trust.enc


        TSP=$TRAVIS_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/travis_public_gpg_key.pgp > dev/travis_public_gpg_key.pgp.enc
        TSP=$TRAVIS_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/travis_secret_gpg_key.pgp > dev/travis_secret_gpg_key.pgp.enc
        TSP=$TRAVIS_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/gpg_owner_trust > dev/gpg_owner_trust.enc

        cat dev/travis_public_gpg_key.pgp.enc
        cat dev/travis_secret_gpg_key.pgp.enc
        cat dev/gpg_owner_trust.enc

        TSP=$TRAVIS_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/travis_public_gpg_key.pgp.enc
        TSP=$TRAVIS_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/travis_secret_gpg_key.pgp.enc
        TSP=$TRAVIS_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/gpg_owner_trust.enc

        # Export and encrpyt trust
        #GPG_OWNERTRUST=$(gpg --export-ownertrust | base64)
        #echo $GPG_OWNERTRUST
        #echo "$GPG_OWNERTRUST" | base64 --decode
        #travis encrypt GPG_OWNERTRUST="$GPG_OWNERTRUST"

        # Note: cant do this. travis gives a data too large error
        #GPG_SECRET_KEYS=$(gpg -a --export-secret-keys $IDENTIFIER | base64)
        #travis encrypt GPG_SECRET_KEYS="$GPG_SECRET_KEYS"
        '''  # <hack vim "regex" parser> '
    #- |
    #    # Install a more recent version of GPG
    #    # https://gnupg.org/download/
    #    export TMP_PREFIX=$HOME/tmp_prefix
    #    export LD_LIBRARY_PATH=$TMP_PREFIX/lib:$LD_LIBRARY_PATH
    #    export PATH=$TMP_PREFIX/bin:$PATH
    #    export CPATH=$TMP_PREFIX/include:$CPATH
    #    if [[ ! -f "$TMP_PREFIX/bin/gpg" ]]; then
    #        # try and have travis cache this
    #        mkdir -p $TMP_PREFIX
    #        echo $TMP_PREFIX
    #        OLD=$(pwd)
    #        cd $TMP_PREFIX
    #        wget https://gnupg.org/ftp/gcrypt/libgpg-error/libgpg-error-1.36.tar.bz2
    #        wget https://gnupg.org/ftp/gcrypt/libgcrypt/libgcrypt-1.8.5.tar.bz2
    #        wget https://gnupg.org/ftp/gcrypt/libksba/libksba-1.3.5.tar.bz2
    #        wget https://gnupg.org/ftp/gcrypt/libassuan/libassuan-2.5.3.tar.bz2
    #        wget https://gnupg.org/ftp/gcrypt/ntbtls/ntbtls-0.1.2.tar.bz2
    #        wget https://gnupg.org/ftp/gcrypt/npth/npth-1.6.tar.bz2
    #        wget https://gnupg.org/ftp/gcrypt/gnupg/gnupg-2.2.17.tar.bz2
    #        tar xjf libgpg-error-1.36.tar.bz2
    #        tar xjf libgcrypt-1.8.5.tar.bz2
    #        tar xjf libksba-1.3.5.tar.bz2
    #        tar xjf libassuan-2.5.3.tar.bz2
    #        tar xjf ntbtls-0.1.2.tar.bz2
    #        tar xjf npth-1.6.tar.bz2
    #        tar xjf gnupg-2.2.17.tar.bz2
    #        (cd libgpg-error-1.36 && ./configure --prefix=$TMP_PREFIX && make install)
    #        (cd libgcrypt-1.8.5 && ./configure --prefix=$TMP_PREFIX && make install)
    #        (cd libksba-1.3.5 && ./configure --prefix=$TMP_PREFIX && make install)
    #        (cd libassuan-2.5.3 && ./configure --prefix=$TMP_PREFIX && make install)
    #        (cd ntbtls-0.1.2 && ./configure --prefix=$TMP_PREFIX && make install)
    #        (cd npth-1.6 && ./configure --prefix=$TMP_PREFIX && make install)
    #        (cd gnupg-2.2.17 && ./configure --prefix=$TMP_PREFIX && make install)
    #        export GPG_EXECUTABLE=gpg
    #        cd $OLD
    #    fi
    # Decrypt and import GPG Keys / trust
    - $GPG_EXECUTABLE --version
    - openssl version
    - $GPG_EXECUTABLE --list-keys
    - TSP=$TRAVIS_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/travis_public_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
    - TSP=$TRAVIS_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/travis_secret_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
    - TSP=$TRAVIS_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/gpg_owner_trust.enc | $GPG_EXECUTABLE --import-ownertrust
    - $GPG_EXECUTABLE --list-keys
    - |
        # Package and publish to pypi (if on release)
        echo "TRAVIS_BRANCH = $TRAVIS_BRANCH"
        if [ "$TRAVIS_BRANCH" == "release" ]; then
            # use set +x to log all intermediate commands 
            set +x
            pip install twine
            if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
              pip install six pyopenssl ndg-httpsclient pyasn1 -U --user
              pip install requests[security] twine --user
            elfi
            if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
              pip install six twine
              pip install --upgrade pyOpenSSL
            fi

            # TODO: reliable and secure gpg keys
            # Relies on a specific environmenmt being available 
            GPG_EXECUTABLE=$GPG_EXECUTABLE GPG_IDENTIFIER=travis-ci-Erotemic USE_GPG=True DEPLOY_BRANCH=release TAG_AND_UPLOAD=yes ./publish.sh
            set -x
        else
            set +x
            GPG_EXECUTABLE=$GPG_EXECUTABLE GPG_IDENTIFIER=travis-ci-Erotemic USE_GPG=True DEPLOY_BRANCH=release TAG_AND_UPLOAD=no ./publish.sh
            set -x
        fi
    - GPG_EXECUTABLE=$GPG_EXECUTABLE GPG_IDENTIFIER=travis-ci-Erotemic USE_GPG=True DEPLOY_BRANCH=release TAG_AND_UPLOAD=no ./publish.sh
