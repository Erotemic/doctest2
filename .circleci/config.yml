# Python CircleCI 2.0 configuration file
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
# References:
#     # how to setup multiple python versions
#     https://stackoverflow.com/questions/948354/default-behavior-of-git-push-without-a-branch-specified
#     https://github.com/adambrenecki/virtualfish/blob/aa3d6271bcb86ad27b6d24f96b5bd386d176f588/.circleci/config.yml
#
#     # Multiple files for a checksum
#     https://discuss.circleci.com/t/cant-checksum-multiple-files-with-slashes-in-the-file-path/20667/2
#     
#     # Auto Cancel Redundant Builds
#     https://circleci.com/docs/2.0/skip-build/#steps-to-enable-auto-cancel-for-pipelines-triggered-by-pushes-to-github-or-the-api
#     https://app.circleci.com/settings/project/github/Erotemic/xdoctest/advanced?return-to=https%3A%2F%2Fapp.circleci.com%2Fpipelines%2Fgithub%2FErotemic%2Fxdoctest


# Abuse YAML notation to make a heredoc. This will be ignored by the CI.
__doc__: &__doc__
    - | 

        __doc__="""
        Main CI has moved to github actions
        """ # "  # hack for vim yml syntax highlighter

version: 2
workflows:
  version: 2
  test:
    jobs:
      - test_full/cp3_10-3_10-linux:
          filters: &__ignore_release__ # this yaml anchor to ignore tests on the release branch
              branches:
                  ignore: 
                      - release
      - test_full/cp39-39-linux:
          filters:
              <<: *__ignore_release__
      - test_full/cp38-38-linux:
          filters:
              <<: *__ignore_release__
      - test_full/cp37-37m-linux:
          filters:
              <<: *__ignore_release__
      - test_full/cp36-36m-linux:
          filters:
              <<: *__ignore_release__
      - test_full/cp35-35m-linux:
          filters:
              <<: *__ignore_release__
      - test_full/cp34-34m-linux:
          filters:
              <<: *__ignore_release__
      - test_full/cp27-27mu-linux:
          filters:
              <<: *__ignore_release__

      - test_minimal/cp3_10-3_10-linux:
          filters:
              <<: *__ignore_release__
      - test_minimal/cp39-39-linux:
          filters:
              <<: *__ignore_release__
      - test_minimal/cp38-38-linux:
          filters:
              <<: *__ignore_release__
      - test_minimal/cp37-37m-linux:
          filters:
              <<: *__ignore_release__
      - test_minimal/cp36-36m-linux:
          filters:
              <<: *__ignore_release__
      - test_minimal/cp35-35m-linux:
          filters:
              <<: *__ignore_release__
      - test_minimal/cp34-34m-linux:
          filters:
              <<: *__ignore_release__
      - test_minimal/cp27-27mu-linux:
          filters:
              <<: *__ignore_release__

      - test_minimal/pypy3:
          filters:
              <<: *__ignore_release__
      - test_full/pypy3:
          filters:
              <<: *__ignore_release__


jobs:

  ###########
  # TEMPLATES
  ###########
  
  .common_template: &common_template
    environment:
      # Setting the python executable environ allows template reuse for pypy
      - PYTHON_EXE: python
    docker:
      - image: cimg/python
    # We shouldnt need a lot of resources to run
    resource_class: small 
    steps:
      - checkout
    #working_directory: ~/{{ .Environment.CIRCLE_JOB }}

  .test_minimal_template: &test_minimal_template  
    <<: 
        - *common_template
    steps:
      - checkout
      # ### INITIALIZE AND CACHE REQUIREMENTS ###
      - restore_cache:
          keys:
          - v3-dependencies-{{ checksum "requirements/runtime.txt" }}-{{ checksum "requirements/tests.txt" }}-{{ checksum "requirements/jupyter.txt" }}-{{ .Environment.CIRCLE_JOB }}
      - run:
          name: install dependencies
          command: |
            pwd
            ls -al
            $PYTHON_EXE -m venv venv || virtualenv -v venv  # first command is python3 || second is python2
            . venv/bin/activate
            # The "minimal" tests install barebones requirements
            pip install pip -U
            pip install -r requirements/tests.txt
            pip install -r requirements/runtime.txt 
            pip install .
      - save_cache:
          paths:
            - ./venv
          key: v3-dependencies-{{ checksum "requirements/runtime.txt" }}-{{ checksum "requirements/tests.txt" }}-{{ checksum "requirements/jupyter.txt" }}-{{ .Environment.CIRCLE_JOB }}
      # ### RUN TESTS ###
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            $PYTHON_EXE run_tests.py
            # Upload to codecov.io (requires a CODECOV_TOKEN environ or github+circleci integration)
            codecov
      - store_artifacts:
          path: test-reports
          destination: test-reports
      - store_artifacts:
          path: .coverage
          destination: .coverage


  .test_full_template: &test_full_template  
    <<: 
        - *common_template
    steps:
      - checkout
      # ### INITIALIZE AND CACHE REQUIREMENTS ###
      - restore_cache:
          keys:
          - v3-dependencies-{{ checksum "requirements/runtime.txt" }}-{{ checksum "requirements/optional.txt" }}-{{ checksum "requirements/tests.txt" }}-{{ checksum "requirements/jupyter.txt" }}-{{ checksum "requirements/colors.txt" }}-{{ .Environment.CIRCLE_JOB }}
      - run:
          name: install dependencies
          command: |
            pwd
            ls -al
            $PYTHON_EXE -m venv venv || virtualenv -v venv  # first command is python3 || second is python2
            . venv/bin/activate
            # The "full" dependency install
            pip install pip -U
            pip install scikit-build
            pip install -r requirements.txt
            pip install .
      - save_cache:
          paths:
            - ./venv
          key: v3-dependencies-{{ checksum "requirements/runtime.txt" }}-{{ checksum "requirements/optional.txt" }}-{{ checksum "requirements/tests.txt" }}-{{ checksum "requirements/jupyter.txt" }}-{{ checksum "requirements/colors.txt" }}-{{ .Environment.CIRCLE_JOB }}
      # ### RUN TESTS ###
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            $PYTHON_EXE run_tests.py
            # Upload to codecov.io (requires a CODECOV_TOKEN environ or github+circleci integration)
            codecov
      - store_artifacts:
          path: test-reports
          destination: test-reports
      - store_artifacts:
          path: .coverage
          destination: .coverage


  ###################################
  ### INHERIT FROM BASE TEMPLATES ###
  ###################################

  # Define tests fo the other python verisons using the "test3.6" template
  # and indicating what needs to be modified.
  #
  # All we need to do is change the base docker image so python is the
  # version we want we can reuse everything else from the template
  #
  test_full/cp3_10-3_10-linux:
    <<: *test_full_template
    docker:
      - image: cimg/python:3.10.0
  
  test_full/cp39-39-linux:
    <<: *test_full_template
    docker:
      - image: cimg/python:3.9
  
  test_full/cp38-38-linux:
    <<: *test_full_template
    docker:
      - image: cimg/python:3.8
  
  test_full/cp37-37m-linux:
    <<: *test_full_template
    docker:
      - image: cimg/python:3.7

  test_full/cp36-36m-linux:
    <<: *test_full_template
    docker:
      - image: cimg/python:3.6

  test_full/cp35-35m-linux:
    <<: *test_full_template
    docker:
      - image: cimg/python:3.5

  test_full/cp34-34m-linux:
    <<: *test_full_template
    docker:
      - image: cimg/python:3.4

  test_full/cp27-27mu-linux:
    <<: *test_full_template
    docker:
      - image: cimg/python:2.7

  # ------------
  test_minimal/cp3_10-3_10-linux:
    <<: *test_minimal_template
    docker:
      - image: cimg/python:3.10
  
  test_minimal/cp39-39-linux:
    <<: *test_minimal_template
    docker:
      - image: cimg/python:3.9
  
  test_minimal/cp38-38-linux:
    <<: *test_minimal_template
    docker:
      - image: cimg/python:3.8

  test_minimal/cp37-37m-linux:
    <<: *test_minimal_template
    docker:
      - image: cimg/python:3.7

  test_minimal/cp36-36m-linux:
    <<: *test_minimal_template
    docker:
      - image: cimg/python:3.6

  test_minimal/cp35-35m-linux:
    <<: *test_minimal_template
    docker:
      - image: cimg/python:3.5

  test_minimal/cp34-34m-linux:
    <<: *test_minimal_template
    docker:
      - image: cimg/python:3.4

  test_minimal/cp27-27mu-linux:
    <<: *test_minimal_template
    docker:
      - image: cimg/python:2.7

  # --- pypy ----

  test_minimal/pypy3:
    <<: *test_minimal_template
    docker:
      - image: pypy:3
    environment:
      - PYTHON_EXE: pypy3

  test_full/pypy3:
    <<: *test_full_template
    docker:
      - image: pypy:3
    environment:
      - PYTHON_EXE: pypy3

 
.__doc__: &__doc__
    - | 

        IMAGE_NAME=cimg/python:3.9
        docker pull $IMAGE_NAME

        IMAGE_NAME=pypy:3
        docker pull $IMAGE_NAME
        docker run -v $HOME/code/xdoctest:/io -it $IMAGE_NAME bash

        IMAGE_NAME=cimg/python:3.10
        docker pull $IMAGE_NAME

        
        docker run -v $HOME/code/xdoctest:/io -it pypy:3 bash

        docker run -v $HOME/code/xdoctest:/io -it $IMAGE_NAME bash

        cd /io
        
        # Logic to print out the commands to reproduce CI steps
        source $HOME/local/init/utils.sh
        pyblock "
            import yaml
            import ubelt as ub
            data = yaml.safe_load(open(ub.expandpath('$HOME/code/xdoctest/.circleci/config.yml')))
            JOB_NAME = 'test_minimal/pypy3'
            job = data['jobs'][JOB_NAME]
            IMAGE_NAME = job['docker'][0]['image']
            print('IMAGE_NAME={}'.format(IMAGE_NAME))
            print('docker run -v $HOME/code/xdoctest:/io -it {} bash'.format(IMAGE_NAME))
            print(ub.codeblock(
            '''
            ###
            ###
            # Clone the mounted repo for a fresh start
            mkdir -p $HOME/code
            git clone /io /root/{JOB_NAME}
            cd /root/{JOB_NAME}
            ''').format(JOB_NAME=JOB_NAME))
            for kv in job['environment']:
                for k, v in kv.items():
                    print('{}={}'.format(k, v))
            for step in job['steps']:
                if 'run' in step:
                    print(step['run']['command'])
        "


        IMAGE_NAME=pypy:3
        docker run -v $HOME/code/xdoctest:/io -it pypy:3 bash
        ###
        ###
        # Clone the mounted repo for a fresh start
        mkdir -p /home/joncrall/code
        git clone /io /root/test_minimal/pypy3
        cd /root/test_minimal/pypy3
        PYTHON_EXE=pypy3
        $PYTHON_EXE -m venv venv || virtualenv -v venv  # first command is python3 || second is python2
        . venv/bin/activate
        # The "minimal" tests install barebones requirements
        pip install pip -U
        pip install -r requirements/tests.txt
        pip install -r requirements/runtime.txt 
        pip install .

        . venv/bin/activate
        python -m pytest --cov=xdoctest --cov-config .coveragerc --cov-report term -s
        # pip install pytest-cov==2.8.1  # hack to avoid regression
        #python run_tests.py


        # TO RUN A JOB ON YOUR LOCAL MACHINE
        # INSTALL CIRCLE CI
        curl -fLSs https://raw.githubusercontent.com/CircleCI-Public/circleci-cli/master/install.sh | DESTDIR=$HOME/.local/bin bash

        JOB_NAME=test_minimal/pypy3
        circleci local execute --job $JOB_NAME

        JOB_NAME=test_full/pypy3
        circleci local execute --job $JOB_NAME

        # Run circleci scripts on a local machine
        mkdir -p $HOME/Downloads
        curl -fLSs https://raw.githubusercontent.com/CircleCI-Public/circleci-cli/master/install.sh | DESTDIR=$HOME/Downloads bash

        $HOME/.local/bin/circleci update
        $HOME/.local/bin/circleci switch

        $HOME/.local/bin/circleci config validate
        $HOME/.local/bin/circleci local execute --job test_minimal/3.9
        $HOME/.local/bin/circleci local execute --job test_minimal/pypy3
        $HOME/.local/bin/circleci local execute --job test_full/2.7
        $HOME/.local/bin/circleci local execute --config .circleci/config.yml --job test_full/cp38-38-linux
        $HOME/.local/bin/circleci local execute --config .circleci/config.yml 
